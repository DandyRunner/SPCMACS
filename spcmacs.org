#+TITLE: SPCMACS
#+AUTHOR: Erwin Jansen
#+PROPERTY: header-args :tangle yes

* Introduction
** What is special about this emacs configuration
This configuration is an attempt to have a fast loading emacs, with a spacemacs like binding scheme.
Yet none of the ovehead of complicated layers, constructions, etc.
Note that this configuration does not include any programming environment, but that would be easy to add.
It does include however a proper GTD (get Things Done) config using org-mode.

Some of the techniques used include:
- Use-package, and it's auto loading capabilities
- General, for the keybindings and spacemacs shortcuts

** Use Use-package
I try to keep my configuration as declarative as possible, thanks to [[https://github.com/jwiegley/use-package][Use-package]] — it's very easy now.
- use-package is used for built-in packages or libraries too (without :ensure)
- each variable/face setting or each function call belongs to the one and only package which provides the symbol

To find out, where do they belong to, use /M-x describe-variable/, /M-x describe-face/ or /M-x describe-function/ accordingly.
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Variables.html][setq]] is almost always means changing customizable variable, so can be rewritten with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Applying-Customizations.html][customize-set-variable]] and therefore with [[https://github.com/jwiegley/use-package#customizing-variables][:custom]] keyword, besides that some defcustoms [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Definitions.html#Variable-Definitions][have get/set functions]], and just setq-ing them won't do the trick. It even supports inline comments so you can trace the changes.

At the same time I don't use [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][Customization]] interface, and my own [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][custom-file]] is =/dev/null=.

For example:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; "Don't show splash screen"
  (setq inhibit-startup-screen t)
#+END_SRC

Becomes:

#+BEGIN_SRC emacs-lisp :tangle no
  :custom
  (inhibit-startup-screen t "Don't show splash screen")
#+END_SRC

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][set-face-attribute]] and stuff like that → [[https://github.com/jwiegley/use-package#customizing-faces][:custom-face]]

#+BEGIN_SRC emacs-lisp :tangle no
   (set-face-attributes 'Man-overstrike nil :inherit font-lock-type-face :bold t)
#+END_SRC

Becomes

#+BEGIN_SRC emacs-lisp :tangle no
  :custom-face
  (Man-overstrike ((t (:inherit font-lock-type-face :bold t))))
#+END_SRC
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html][add-hook]] → [[https://github.com/jwiegley/use-package#hooks][:hook]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html][define-key]] → [[https://github.com/jwiegley/use-package#key-binding][:bind]]
- Use [[https://github.com/jwiegley/use-package#loading-packages-in-sequence][:after]] if you need one package to be loaded after another.

 All defuns should go to packages/libraries. [[https://github.com/quelpa/quelpa][Quelpa]] really helps with that — you can make a package from whatever source yo want.

*** Fonts and colors.
Hardcoding these can break themes, so you use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][:inherit]] for customizations.

*** Keybindings
- Try not to hardcode bindings starting with /C-x/, /C-c/ and /C-h/, which are [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Prefix-Keymaps.html#Prefix-Keymaps][bound]] to ~ctl-x-map~, ~mode-specific-map~ and ~help-map~ respectively. Not that I'm not happy with all these defaults (except /C-h/, see *simple* package below), but just in case if you want to rebind them to something else (/SPC/, /mouse-1/, break, gas or whatever), you can do it, at least for my own bindings — sadly, some plugins hardcode them (and that causes many issues for alternative bindings users), but I hope it will change someday.
- Use named prefix keymaps so they are visible in minibuffer while [[https://github.com/justbur/emacs-which-key][Which-key]] is active.
- Use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Remapping-Commands.html][remap]] if you want to rebind a command to a "better" version of it and do an explicit keys declaration, when you rebind it to something completely different.
- Where mnemonics conflicts with ergonomics - prefer the former.
** Use General

** Special thanks to 
  This spcmacs configuration would never have developed without the inspiration from:
- https://github.com/willbush/system/tree/master/emacs
- https://github.com/a13/emacs.d


Still to consider for implementation:
+ https://github.com/cqql/xresources-theme
+ https://dougie.io/emacs/indentation/

* Header
#+BEGIN_SRC emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC
* Personal Information
Personal information, to be used for instance for email and git.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Erwin Jansen"
      user-mail-address "echjansen@outlook.com"
      auth-sources (list (expand-file-name "~/.authinfo.gpg")))
#+END_SRC
* Bootup
Garbage collection on hold while the init scrips runs, and redirect the custom paramaters to be written in a seperate file rather than this init file (spcmacs.el)
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))

  (eval-and-compile
    (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

  (defvar temp--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+END_SRC
* Package Sources
#+BEGIN_SRC emacs-lisp
  ;;;We’re going to set the load-path ourselves and avoid calling (package-initilize) (for performance reasons) so we need to set package--init-file-ensured to true to tell package.el to not automatically call it on our behalf. Additionally we’re setting package-enable-at-startup to nil so that packages will not automatically be loaded for us since use-package will be handling that.
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/.elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t))

    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)
    ;; tells emacs not to load any packages before starting up
    ;; the following lines tell emacs where on the internet to look up
    ;; for new packages.
    (setq package-archives '(("melpa"     . "https://melpa.org/packages/")
                             ("elpa"      . "https://elpa.gnu.org/packages/")
                             ("org"       . "https://orgmode.org/elpa/")))
    ;; (package-initialize)
    (unless package--initialized (package-initialize t))

    ;; Bootstrap `use-package'
    (unless (package-installed-p 'use-package) ; unless it is already installed
      (package-refresh-contents) ; updage packages archive
      (package-install 'use-package)) ; and install the most recent version of use-package

    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
Now that we are ready to laod packages, we need to make sure we will keep our modeline clean by using the dimish package.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
* Emacs
** IBuffer
I buffer provides need lists
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind
    ([remap list-buffers] . ibuffer))
#+END_SRC
* Sensible defaults
When using the graphical system in linux it is faster to create an .Xresources file in the home folder.
This speeds up emacs considerably. 
#+BEGIN_SRC :tangle off 
Emacs.menuBar: off
Emacs.verticalScrollBars: off
Emacs.toolBar: off
#+END_SRC
Once the resource file is configured run the following command to instruct Xorg
#+BEGIN_SRC :tangle off
xrdb .Xresources
#+END_SRC
In case you are not on linux
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-face-attribute 'default nil
                        :family "Source Code Pro"
                        :height 110
                        :weight 'normal
                        :width 'normal))

#+END_SRC
And now for the common defaults
#+BEGIN_SRC emacs-lisp
  ;; Show line and column numbers on the modeline
  (line-number-mode 1)
  (column-number-mode 1)

  ;; No two spaces after a period
  (setq sentence-end-double-space nil)

  ;; Who wants to type `yes and `no on answers?
  (defalias 'yer-or-no-p 'y-or-no-p)

  ;; Prevent indentation inserting tabs
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; Toggle wrap text after 80 characters on a line
  (setq fill-column 80)

  ;; Set default line ending
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  (setq inhibit-splash-screen t
        initial-scratch-message nil
        ring-bell-function 'ignore
        help-window-select t)

  ;; Changes default behaviour of scrolling to the bottom. Pointer will stay on bottom.
  (setq scroll-conservatively 666)

  ;; Faintly highlight the line with the pointer
  (global-hl-line-mode 1)

  ;; Follow symlinks without prompting
  (setq vc-follow-symlinks t)

  ;; Iproves perfromance with doom modeline 9in windows)
  (setq inhibit-compacting-font-caches t)

  ;; Automaticall create pairs
  (setq electric-pair-pairs
        '(
          (?\( . ?\))
          (?\[ . ?\])
          (?\{ . ?\})
          ))
  (electric-pair-mode t)

  ;; Set tab behaviour
  (setq default-tab-width 2)
  (setq evil-shift-width 2)

  ;; Allow narow to region
  (put 'narrow-to-region 'disabled nil)

  ;; Blink cursor to find it easily
  (blink-cursor-mode 1)

  (winner-mode 1)

  ;; Starup full screen
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)

  (setq auto-revert-check-vc-info t) ;;TODO - possible performance issue

  ;; a proper font
  (set-face-attribute 'default nil
                      :family "Source Code Pro"
                      :height 110
                      :weight 'normal
                      :width 'normal)
#+END_SRC
** Backups and auto save 
#+BEGIN_SRC emacs-lisp
  ;; Put backup files neatly away
  (let ((backup-dir "~/.emacs.d/.backups")
        (auto-saves-dir "~/.emacs.d/.auto-saves/"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir))

  (setq backup-by-copying t    ; Don't delink hardlinks
        delete-old-versions t  ; Clean up the backups
        version-control t      ; Use version numbers on backups,
        kept-new-versions 5    ; keep some new versions
        kept-old-versions 2)   ; and some old ones, too
#+END_SRC
* Which Key
What would we be without the key popup help appearing when hitting M-x or M-c?
In combination with general.el we also have which-key help with the leader key SPC.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode 1))
#+END_SRC
* Keybindings
General is a generic package for concise key binding in emacs.
This configuration sets up a spacemacs like keybinding - here using emacs default functions,
that can be overiden later by installed packages to provide more complete functions.
** The General Package
#+BEGIN_SRC emacs-lisp 
  (use-package general
    :after which-key
    :config
    (general-override-mode 1)

    (defun find-user-init-file ()
      "Edit the `user-init-file', in the same window."
      (interactive)
      (find-file (expand-file-name "spcmacs.org" user-emacs-directory)))

    (defun load-user-init-file ()
      "Load the `user-init-file', in same window."
      (interactive)
      (load-file user-init-file))

    (defun rename-file-and-buffer ()
      "Rename the current buffer and file it is visiting."
      (interactive)
      (let ((filename (buffer-file-name)))
        (if (not (and filename (file-exists-p filename)))
            (message "Buffer is not visiting a file!")
          (let ((new-name (read-file-name "New name: " filename)))
            (cond
             ((vc-backend filename) (vc-rename-file filename new-name))
             (t
              (rename-file filename new-name t)
              (set-visited-file-name new-name t t)))))))

    (general-create-definer evil-def
      :states '(normal)
      :prefix "SPC")

    (general-create-definer emacs-def
      :states '(emacs)
      :prefix "s-SPC")

    (general-def
      :keymaps 'key-translation-map
      "ESC" (kbd "C-g"))

    (general-def
      :prefix "C-c"
      "a" 'org-agenda
     "c" 'org-capture)
#+END_SRC     
** SPC
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "SPC"
    :states '(normal visual)
    :keymaps 'override
    "a"   '(:ignore t :which-key "applications")
    "b"   '(:ignore t :which-key "buffer")
    "f"   '(:ignore t :which-key "file")
    "fe"  '(:ignore t :which-key "emacs")
    "g"   '(:ignore t :which-key "git")
    "h"   '(:ignore t :which-key "help")
    "p"   'projectile-command-map
    "s"   '(:ignore t :which-key "search")
    "t"   '(:ignore t :which-key "toggle")
    "w"   '(:ignore t :which-key "window")) 
#+END_SRC
** SPC f - File
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "SPC f"
    :states '(normal visual)
    :keymaps 'override
    "d"  '(fd-dired :wk "unknown")
    "ed" '(find-user-init-file :wk "edit user config")
    "eR" '(load-user-init-file :wk "reload user config")
    "f"  '(find-file :wk "find file")
    "s"  '(save-buffer :wk "save file"))
#+END_SRC
** SPC h - Help
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "SPC h"
    :states '(normal visual)
    :keymaps 'override
    "d" '(:ignore t :wk "describe")
    "db" '(describe-bindings :wk "describe bindings")
    "dc" '(describe-char :wk "describe character")
    "df" '(describe-function :wk "describe function")
    "dk" '(describe-key :wk "describe key")
    "dm" '(describe-mode :wk "describe mode")
    "dp" '(describe-package :wk "describe package")
    "dv" '(describe-variable :wk "describe variable")
    "dt" '(describe-theme :wk "describe theme")
    "ds" '(describe-symbol :wk "describe symbol")
    "i"  '(info :wk "info")
    "I"  '(info-display-manual :wk "info from manual")
    "l"  '(find-library :wk "find library")
    "n"  '(view-emacs-news :wk "emacs news")
    "w"  '(woman :wk "woman"))
#+END_SRC
** The End
#+BEGIN_SRC emacs-lisp
    )
#+END_SRC
* Evil Mode
There is no better way but vim editing. This further allows for SPC for a leader key
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :hook (after-init . evil-mode)
    :config
    ;; Set evil mode tags
    (setq evil-normal-state-tag " NORMAL")
    (setq evil-insert-state-tag " INSERT")
    (setq evil-visual-state-tag " VISUAL")
    (setq doc-view-continues t)
    :general
    (evil-def
      "wh"  '(evil-window-left :wk "window left")
      "wl"  '(evil-window-right :wk "window right")
      "wj"  '(evil-window-down :wk "window down")
      "wk"  '(evil-window-up :wk "window up"))) 
#+END_SRC 
** Evil Commentary
Handy tool to comment blocks of code
#+BEGIN_SRC emacs-lisp 
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode 1)
  :general
  ('normal override-global-map
    "gc" '(evil-commentary :wk "comment")
    "gC" '(evil-commentary-line :wk "comment line"))) 
#+END_SRC 
* Narrowing System
** Ivy
Ivy is for quick and easy selection from a list. 
When Emacs prompts for a string from a list of several possible choices, 
Ivy springs into action to assist in narrowing and picking the right string from a vast number of choices.
In short - it provides an interface to list, search, filter and perform actions on a collection of "things".
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :hook (after-init . ivy-mode)
      :commands (ivy-switch-buffer)
      :diminish ivy-mode
      :config
      (progn
        (setq ivy-use-virtual-buffers t
              ivy-count-format "(%d/%d) "
              ivy-truncate-lines nil
              ivy-initial-inputs-alist nil
              ivy-display-style 'fancy)
        (setq ivy-re-builders-alist
              '((t . ivy--regex-plus))))
     :general
     (general-def
       :prefix "SPC"
        :states '(normal visual)
        :keymaps 'override
        "bm"  '(ivy-switch-buffer :wk "switch to buffer")))

    ;; Used by Ivy to sort commands by frequency
    (use-package smex
      :hook (after-init . smex-initialize)
      :config
      (global-set-key (kbd "M-X") 'smex-major-mode-commands))
#+END_SRC
** Counsel
To keep concerns separated, Ivy doesn't have a lot of other functionality.
Counsel provides a collection of Ivy-enhanced versions of common Emacs commands.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :bind (("C-c C-r" . ivy-resume))
    :general
    (general-def
      "M-x"      '(counsel-M-x :wk "M-x")
      "C-x C-f"  '(counsel-find-file :wk "find file"))
    (general-def
      :prefix "SPC"
      :states '(normal visual)
      :keymaps 'override
      ;; SPC
      "SPC"      '(counsel-M-x :wk "M-x")
      ;; SPC f - File
      "ff"       '(counsel-find-file :wk "find file")
      "fr"       '(counsel-recentf :wk "recent files")
      "fL"       '(counsel-locate :wk "locate file")
      ;; SPC h d -Help Describe
      "hdb" '(counsel-descbinds :wk "describe bindings")
      "hdf" '(counsel-describe-function :wk "describe function")
      "hdv" '(counsel-describe-variable :wk "describe variable")
      "hds" '(counsel-info-lookup-symbol :wk "describe symbol")))
#+END_SRC
** Swiper
An Ivy-enhanced alternative to isearch.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper)
    :general
    (general-def
      "C-s"  'swiper)
    (evil-def
      "ss"  'swiper))
#+END_SRC
* Projects
Some tools that help when working with projects
** Projectile
provide a nice set of features operating on a project level without introducing external dependencies (when feasible)
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-project-root-files-functions
     '(projectile-root-local
       projectile-root-top-down
       projectile-root-bottom-up
       projectile-root-top-down-recurring))
    (projectile-completion-system 'ivy))
#+END_SRC
** Projectile Counsel
Counsel filtering support for projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :after counsel projectile
    :config
    (counsel-projectile-mode))
#+END_SRC
* Auto Completion
** Company
Company is an auto completion tool for programming languages.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :commands (company-complete-common
               company-manual-begin
               company-grab-line)
    :diminish company-mode
    :init
    (progn
      (setq company-idle-delay .1
            company-tooltip-limit 10
            company-tooltip-align-annotations t
            company-minimum-prefix-length 2
            company-require-match 'never
            company-dabbrev-code-other-buffers t
            company-dabbrev-ignore-case nil
            company-dabbrev-downcase nil
            ))
    :config
    (progn
      (setq company-backends
            '(company-keywords
              company-files
              company-capf
              company-dabbrev-code
              company-dabbrev))
      (setq company-frontends '(company-echo-metadata-frontend
                                company-pseudo-tooltip-unless-just-one-frontend
                                company-preview-frontend))
      (setq company-backends '((company-capf company-files)
                               (company-dabbrev-code company-keywords)
                               company-dabbrev
                               company-yasnippet)))
    :general
    (general-def
      "C-n"  'company-select-next
      "C-p"  'company-select-previous))
#+END_SRC
** Auto Complete
Since Company mode does not appear to kick in - lets try auto-complete mode.
#+BEGIN_SRC emacs-lisp :tangle off
  (use-package auto-complete
    :config
    (ac-config-default))
#+END_SRC
* Organisation
** Org Mode
The best reason for using emacs. org Mode provides a complete oragnisation tool. This particular configuration is focusing on GTD - Getting Things Done!
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    ;;ensure we load the latest version of org
;;    :ensure org-plus-contrib
    :hook 
    ;; Wrap long lines while in org mode
    (org-mode . visual-line-mode)
    ;; Indent content under headers, which makes for easier reading
    (org-mode . org-indent-mode) 
    :custom
    (org-src-tab-acts-natively t))
#+END_SRC
** Org Bullet
Lets have some better looking bullets for our headers
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :custom
    ;; org-bullets-bullet-list
    ;; default: "◉ ○ ✸ ✿"
    ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
    ;; Small: ► • ★ ▸
    (org-bullets-bullet-list '("►"))
    ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
    ;; (org-ellipsis "⤵")
    (org-ellipsis "▼")
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC
* Programming
** Ibuffer Version Control - called with C-x C-b (ibuffer-list-buffers)
Pretty list buffer for version controlled files
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t
    :config
    (define-ibuffer-column icon (:name "Icon" :inline t)
      (all-the-icons-ivy--icon-mode major-mode))
    :custom
    (ibuffer-formats
     '((mark modified read-only vc-status-mini " "
             (name 18 18 :left :elide)
             " "
             (size 9 -1 :right)
             " "
             (mode 16 16 :left :elide)
             " "
             (vc-status 16 16 :left)
             " "
             vc-relative-file)))
    :hook
    (ibuffer . (lambda ()
                 (ibuffer-vc-set-filter-groups-by-vc-root)
                 (unless (eq ibuffer-sorting-mode 'alphabetic)
                   (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
* Version Control
** Magit
The second next best reason to use emacs. The Magit package provides an excellent interface to the complexity of Git.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status)
    :general
    (evil-def
      "gs"  'magit-status))
 #+END_SRC
* UI
** Themes
*** Theme Tools
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :commands (rainbow-mode))
#+END_SRC
*** Doom Themes
 #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :config
     (doom-themes-org-config)
     (defun load-doom-one ()
         "Load Doom One theme"
       (interactive)
       (load-theme 'doom-one))
     (defun load-doom-one-light ()
       "Load the Doom White theme"
       (interactive)
       (load-theme 'doom-one-light))
     (defun load-doom-vibrant ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'doom-vibrant))
     (defun load-doom-tomorrow-blue ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'sanityinc-tomorrow-blue))
       ;; (load-file (expand-file-name "+doom-tomorrow-blue.el" user-emacs-directory)))
     (defun load-doom-tomorrow-night ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'doom-tomorrow-night))
     (evil-def
       "td" '(:ignore t :which-key "doom themes")
       "tdd" 'load-doom-one
       "tdv" 'load-doom-vibrant
       "tdl" 'load-doom-one-light
       "tdb" 'load-doom-tomorrow-blue
       "tdn" 'load-doom-tomorrow-night))
 #+END_SRC
*** Sanityinc Themes
 #+BEGIN_SRC emacs-lisp
 (use-package color-theme-sanityinc-tomorrow
   :ensure t
   :hook (after-init . load-sanityinc-blue)
   :config
   (defun load-sanityinc-blue()
     "Load the Sanityinc Blue theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-blue))
    (defun load-sanityinc-dark()
     "Load the Sanityinc Dark theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-night))
   (defun load-sanityinc-light()
     "Load the Sanityinc Light theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-day))
   :general
   (evil-def 
     "ts" '(:ignore t :which-key "tomorrow")
     "tsb" 'load-sanityinc-blue
     "tsd" 'load-sanityinc-dark
     "tsl" 'load-sanityinc-light))
#+END_SRC
*** Doom One Blue Custom
#+BEGIN_SRC emacs-lisp :tangle off
  (require 'doom-themes)

  (defgroup doom-one-theme nil
    "Options for doom-themes"
    :group 'doom-themes)

  (defcustom doom-one-brighter-modeline nil
    "If non-nil, more vivid colors will be used to style the mode-line."
    :group 'doom-one-theme
    :type 'boolean)

  (defcustom doom-one-brighter-comments nil
    "If non-nil, comments will be highlighted in more vivid colors."
    :group 'doom-one-theme
    :type 'boolean)

  (defcustom doom-one-comment-bg doom-one-brighter-comments
    "If non-nil, comments will have a subtle, darker background. Enhancing their
  legibility."
    :group 'doom-one-theme
    :type 'boolean)

  (defcustom doom-one-padded-modeline doom-themes-padded-modeline
    "If non-nil, adds a 4px padding to the mode-line. Can be an integer to
  determine the exact padding."
    :group 'doom-one-theme
    :type '(or integer boolean))

  (def-doom-theme doom-one
    "A dark theme inspired by Atom One Dark"

    ;; name        default   256       16
    ((bg         '("#FFFFFF" nil       nil            ))
     (bg-alt     '("#21242b" nil       nil            ))
     (base0      '("#1B2229" "black"   "black"        ))
     (base1      '("#1c1f24" "#1e1e1e" "brightblack"  ))
     (base2      '("#202328" "#2e2e2e" "brightblack"  ))
     (base3      '("#23272e" "#262626" "brightblack"  ))
     (base4      '("#3f444a" "#3f3f3f" "brightblack"  ))
     (base5      '("#5B6268" "#525252" "brightblack"  ))
     (base6      '("#73797e" "#6b6b6b" "brightblack"  ))
     (base7      '("#9ca0a4" "#979797" "brightblack"  ))
     (base8      '("#DFDFDF" "#dfdfdf" "white"        ))
     (fg         '("#bbc2cf" "#bfbfbf" "brightwhite"  ))
     (fg-alt     '("#5B6268" "#2d2d2d" "white"        ))

     (grey       base4)
     (red        '("#ff6c6b" "#ff6655" "red"          ))
     (orange     '("#da8548" "#dd8844" "brightred"    ))
     (green      '("#98be65" "#99bb66" "green"        ))
     (teal       '("#4db5bd" "#44b9b1" "brightgreen"  ))
     (yellow     '("#ECBE7B" "#ECBE7B" "yellow"       ))
     (blue       '("#51afef" "#51afef" "brightblue"   ))
     (dark-blue  '("#2257A0" "#2257A0" "blue"         ))
     (magenta    '("#c678dd" "#c678dd" "brightmagenta"))
     (violet     '("#a9a1e1" "#a9a1e1" "magenta"      ))
     (cyan       '("#46D9FF" "#46D9FF" "brightcyan"   ))
     (dark-cyan  '("#5699AF" "#5699AF" "cyan"         ))

     ;; face categories -- required for all themes
     (highlight      blue)
     (vertical-bar   (doom-darken base1 0.1))
     (selection      dark-blue)
     (builtin        magenta)
     (comments       (if doom-one-brighter-comments dark-cyan base5))
     (doc-comments   (doom-lighten (if doom-one-brighter-comments dark-cyan base5) 0.25))
     (constants      violet)
     (functions      magenta)
     (keywords       blue)
     (methods        cyan)
     (operators      blue)
     (type           yellow)
     (strings        green)
     (variables      (doom-lighten magenta 0.4))
     (numbers        orange)
     (region         `(,(doom-lighten (car bg-alt) 0.15) ,@(doom-lighten (cdr base0) 0.35)))
     (error          red)
     (warning        yellow)
     (success        green)
     (vc-modified    orange)
     (vc-added       green)
     (vc-deleted     red)

     ;; custom categories
     (hidden     `(,(car bg) "black" "black"))
     (-modeline-bright doom-one-brighter-modeline)
     (-modeline-pad
      (when doom-one-padded-modeline
        (if (integerp doom-one-padded-modeline) doom-one-padded-modeline 4)))

     (modeline-fg     nil)
     (modeline-fg-alt base5)

     (modeline-bg
      (if -modeline-bright
          (doom-darken blue 0.475)
        `(,(doom-darken (car bg-alt) 0.15) ,@(cdr base0))))
     (modeline-bg-l
      (if -modeline-bright
          (doom-darken blue 0.45)
        `(,(doom-darken (car bg-alt) 0.1) ,@(cdr base0))))
     (modeline-bg-inactive   `(,(doom-darken (car bg-alt) 0.1) ,@(cdr bg-alt)))
     (modeline-bg-inactive-l `(,(car bg-alt) ,@(cdr base1))))


    ;; --- extra faces ------------------------
    ((elscreen-tab-other-screen-face :background "#353a42" :foreground "#1e2022")

     (evil-goggles-default-face :inherit 'region :background (doom-blend region bg 0.5))

     ((line-number &override) :foreground base4)
     ((line-number-current-line &override) :foreground fg)

     (font-lock-comment-face
      :foreground comments
      :background (if doom-one-comment-bg (doom-lighten bg 0.05)))
     (font-lock-doc-face
      :inherit 'font-lock-comment-face
      :foreground doc-comments)

     (mode-line
      :background modeline-bg :foreground modeline-fg
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
     (mode-line-inactive
      :background modeline-bg-inactive :foreground modeline-fg-alt
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
     (mode-line-emphasis
      :foreground (if -modeline-bright base8 highlight))

     (solaire-mode-line-face
      :inherit 'mode-line
      :background modeline-bg-l
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-l)))
     (solaire-mode-line-inactive-face
      :inherit 'mode-line-inactive
      :background modeline-bg-inactive-l
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-l)))

     ;; Doom modeline
     (doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
     (doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
     (doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
     (doom-modeline-buffer-project-root :foreground green :weight 'bold)

     ;; ivy-mode
     (ivy-current-match :background dark-blue :distant-foreground base0 :weight 'normal)

     ;; --- major-mode faces -------------------
     ;; css-mode / scss-mode
     (css-proprietary-property :foreground orange)
     (css-property             :foreground green)
     (css-selector             :foreground blue)

     ;; markdown-mode
     (markdown-markup-face :foreground base5)
     (markdown-header-face :inherit 'bold :foreground red)
     (markdown-code-face :background (doom-lighten base3 0.05))

     ;; org-mode
     (org-hide :foreground hidden)
     (solaire-org-hide-face :foreground hidden))


    ;; --- extra variables ---------------------
    ;; ()
    )
#+END_SRC
*** Doom Themes Blue (Custom)
Personal attempt at bringing the blue theme to Doom Blue :)
  #+BEGIN_SRC emacs-lisp :tangle off 
    (require 'doom-themes)
    (defgroup doom-tomorrow-blue-theme nil
      "Options for doom-themes"
      :group 'doom-themes)

    (defcustom doom-tomorrow-blue-padded-modeline doom-themes-padded-modeline
      "If non-nil, adds a 4px padding to the mode-line.
    Can be an integer to determine the exact padding."
      :group 'doom-tomorrow-blue-theme
      :type '(or integer boolean))

    (def-doom-theme doom-tomorrow-blue
      "A theme based off of Chris Kempson's Tomorrow Blue."

      ;; name        gui       256       16
      ((bg         '("#ffffff" "white"   "white" ))
       (bg-alt     '("#eaeaea" nil       nil     ))
       (base0      '("#f2f2f2" "white"   "white" ))
       (base1      '("#e4e4e4" "#e4e4e4"         ))
       (base2      '("#dedede" "#cccccc"         ))
       (base3      '("#d6d4d4" "#cccccc" "silver"))
       (base4      '("#C0bfbf" "#c0c0c0" "silver"))
       (base5      '("#a3a1a1" "#adadad" "silver"))
       (base6      '("#8a8787" "#949494" "silver"))
       (base7      '("#696769" "#6b6b6b" "silver"))
       (base8      '("#000000" "#000000" "black" ))
       (fg         '("#4d4d4c" "#3a3a3a" "black"))
       (fg-alt     (doom-darken fg 0.6))

       (grey       '("#a5a4a5" "#999999" "silver"))
       (red        '("#c82829" "#cc3333" "red"))
       (orange     '("#f5871f" "#ff9933" "brightred"))
       (yellow     '("#eab700" "#ffcc00" "yellow"))
       (green      '("#718c00" "#669900" "green"))
       (blue       '("#3e999f" "#339999" "brightblue"))
       (dark-blue  '("#4271ae" "#336699" "blue"))
       (teal       blue) ; FIXME replace with real teal
       (magenta    '("#c9b4cf" "#c9b4cf" "magenta"))
       (violet     '("#8959a8" "#996699" "brightmagenta"))
       (cyan       '("#8abeb7" "#8abeb7" "cyan"))
       (dark-cyan  (doom-lighten cyan 0.4))

       ;; face categories
       (highlight      dark-blue)
       (vertical-bar   base0)
       (selection      base3)
       (builtin        blue)
       (comments       grey)
       (doc-comments   (doom-darken grey 0.1))
       (constants      orange)
       (functions      blue)
       (keywords       violet)
       (methods        blue)
       (operators      fg)
       (type           yellow)
       (strings        green)
       (variables      red)
       (numbers        orange)
       (region         selection)
       (error          red)
       (warning        yellow)
       (success        green)
       (vc-modified    fg-alt)
       (vc-added       green)
       (vc-deleted     red)

       ;; custom categories
       (modeline-bg     `(,(doom-darken (car bg) 0.1) ,@(cdr base3)))
       (modeline-bg-alt `(,(doom-darken (car bg) 0.14) ,@(cdr base1)))
       (modeline-fg     base8)
       (modeline-fg-alt comments)
       (-modeline-pad
        (when doom-tomorrow-blue-padded-modeline
          (if (integerp doom-tomorrow-blue-padded-modeline)
              doom-tomorrow-blue-padded-modeline
            4))))

      ;; --- faces ------------------------------
      ((doom-modeline-buffer-path       :foreground violet :bold bold)
       (doom-modeline-buffer-major-mode :inherit 'doom-modeline-buffer-path)

       ((line-number &override) :foreground base4)
       ((line-number-current-line &override) :foreground blue :bold bold)

       (ivy-current-match :background region :distant-foreground grey :weight 'ultra-bold)
       (ivy-minibuffer-match-face-1 :foreground base5 :weight 'light)
       (ivy-minibuffer-match-face-2 :inherit 'ivy-minibuffer-match-face-1 :foreground violet :weight 'ultra-bold)
       (ivy-minibuffer-match-face-3 :inherit 'ivy-minibuffer-match-face-2 :foreground blue)
       (ivy-minibuffer-match-face-4 :inherit 'ivy-minibuffer-match-face-2 :foreground red)

       ;; rainbow-delimiters
       (rainbow-delimiters-depth-1-face :foreground violet)
       (rainbow-delimiters-depth-2-face :foreground blue)
       (rainbow-delimiters-depth-3-face :foreground orange)
       (rainbow-delimiters-depth-4-face :foreground green)
       (rainbow-delimiters-depth-5-face :foreground magenta)
       (rainbow-delimiters-depth-6-face :foreground yellow)
       (rainbow-delimiters-depth-7-face :foreground teal)

       (mode-line
        :background modeline-bg :foreground modeline-fg
        :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
       (mode-line-inactive
        :background modeline-bg-alt :foreground modeline-fg-alt
        :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-alt))))

      ;; --- variables --------------------------
      ;; ()
      )

     (provide 'doom-tomorrow-blue-theme)
 #+END_SRC
** Modeline
*** Doom Modeline
 Doom powerline together with the Doom theme, clean and fast
 #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode)
     :config
     (setq
      doom-modeline-buffer-file-name-style 'truncate-upto-project
      doom-modeline-icon t
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-minor-modes t
      doom-modeline-word-count t
      doom-modeline-checker-simple-format t
      doom-modeline-vcs-max-length 12
      doom-modeline-persp-name t
      doom-modeline-lsp t
      doom-modeline-github t
      doom-modeline-github-interval (* 30 60)
      doom-modeline-mu4e t
      doom-modeline-ircstylize 'identity))
 #+END_SRC
*** Moody Modeline
 This is the latest from the develoer of Magit, and thus has potential.
 Bt still in early stages, and appears rather simple in functionality yet
 #+BEGIN_SRC emacs-lisp :tangle off
   (use-package moody
     :ensure t
     :config
     (moody-replace-mode-line-buffer-identification)
     (moody-replace-vc-mode))
 #+END_SRC
** Dashboard
Provide a decend startup screen.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-items '((agenda . 5)
                       (recents . 5)
                       (projects . 5)
                       (registers . 5)
                       (bookmarks . 5))))
#+END_SRC
* Finishing Up
Our configuration file has loaded. Time to enable garbage collection again, and display the time it took to load.
#+BEGIN_SRC emacs-lisp
   (eval-and-compile
     (add-hook 'emacs-startup-hook '(lambda ()
                                      (setq gc-cons-threshold 16777216
                                            gc-cons-percentage 0.1
                                            file-name-handler-alist
                                            temp--file-name-handler-alist))))

   (setq dashboard-banner-logo-title (concat "Welcome to Emacs: " user-full-name ". Startup time: " (emacs-init-time)))
#+END_SRC
Tangle this file to create the spcmacs.el file, which speeds up loading emacs.
#+BEGIN_SRC emcas-lisp
(add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
#+END_SRC
* Notes
** Profiling
Install esup, and run the commmand form the commandline....
