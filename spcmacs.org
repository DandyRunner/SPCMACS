#+TITLE: SPCMACS
#+AUTHOR: Erwin Jansen
#+PROPERTY: header-args :tangle yes

* Header
#+BEGIN_SRC emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC
* Personal Information
Personal information, to be used for instance for email and git.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Erwin Jansen"
      user-mail-address "echjansen@outlook.com"
      auth-sources (list (expand-file-name "~/.authinfo.gpg")))
#+END_SRC
* Bootup
Garbage collection on hold while the init scrips runs, and redirect the custom paramaters to be written in a seperate file rather than this init file (spcmacs.el)
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))

  (eval-and-compile
    (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

  (defvar temp--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+END_SRC
* Package Sources
#+BEGIN_SRC emacs-lisp
  ;;;We’re going to set the load-path ourselves and avoid calling (package-initilize) (for performance reasons) so we need to set package--init-file-ensured to true to tell package.el to not automatically call it on our behalf. Additionally we’re setting package-enable-at-startup to nil so that packages will not automatically be loaded for us since use-package will be handling that.
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/.elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t))

    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))

  (eval-when-compile
    (require 'package)
    ;; tells emacs not to load any packages before starting up
    ;; the following lines tell emacs where on the internet to look up
    ;; for new packages.
    (setq package-archives '(("melpa"     . "https://melpa.org/packages/")
                             ("elpa"      . "https://elpa.gnu.org/packages/")
                             ("repo-org"  . "https://orgmode.org/elpa/")))
    ;; (package-initialize)
    (unless package--initialized (package-initialize t))

    ;; Bootstrap `use-package'
    (unless (package-installed-p 'use-package) ; unless it is already installed
      (package-refresh-contents) ; updage packages archive
      (package-install 'use-package)) ; and install the most recent version of use-package

    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
* Sensible defaults
#+BEGIN_SRC emacs-lisp
  (setq fill-column 80)  ; toggle wrapping text at the 80th character
  (setq scroll-conservatively 101)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (setq-default indent-tabs-mode nil)
  (global-hl-line-mode 1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode 0)
  (winner-mode 1)
  (put 'narrow-to-region 'disabled nil)
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
  (setq auto-revert-check-vc-info t) ;;TODO - possible performance issue
  (setq evil-normal-state-tag " NORMAL")
  (setq evil-insert-state-tag " INSERT")
  (setq evil-visual-state-tag " VISUAL")
#+END_SRC
** Backups and auto save 
#+BEGIN_SRC emacs-lisp
  ;; Put backup files neatly away
  (let ((backup-dir "~/.emacs.d/.backups")
        (auto-saves-dir "~/.emacs.d/.auto-saves/"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir))

  (setq backup-by-copying t    ; Don't delink hardlinks
        delete-old-versions t  ; Clean up the backups
        version-control t      ; Use version numbers on backups,
        kept-new-versions 5    ; keep some new versions
        kept-old-versions 2)   ; and some old ones, too
#+END_SRC
* Which Key
What would we be without the key popup help appearing when hitting M-x or M-c?
In combination with general.el we also have which-key help with the leader key SPC.
#+BEGIN_SRC emacs-lisp
 (use-package which-key
   :config (which-key-mode 1))
#+END_SRC
* General
General is a generic package for concise key binding in emacs.
#+BEGIN_SRC emacs-lisp 
  (use-package general
    :after which-key
    :config
    (general-override-mode 1)

    (defun find-user-init-file ()
      "Edit the `user-init-file', in the same window."
      (interactive)
      (find-file (expand-file-name "spcmacs.org" user-emacs-directory)))

    (defun load-user-init-file ()
      "Load the `user-init-file', in same window."
      (interactive)
      (load-file user-init-file))

    (defun rename-file-and-buffer ()
      "Rename the current buffer and file it is visiting."
      (interactive)
      (let ((filename (buffer-file-name)))
        (if (not (and filename (file-exists-p filename)))
            (message "Buffer is not visiting a file!")
          (let ((new-name (read-file-name "New name: " filename)))
            (cond
             ((vc-backend filename) (vc-rename-file filename new-name))
             (t
              (rename-file filename new-name t)
              (set-visited-file-name new-name t t)))))))

    (general-create-definer evil-def
      :states '(normal)
      :prefix "SPC")

    (general-create-definer emacs-def
      :states '(emacs)
      :prefix "s-SPC")

    (evil-def 'normal
      :prefix "SPC"
      "a"   '(:ignore t :which-key "applications")
      "b"   '(:ignore t :which-key "buffer")
      "f"   '(:ignore t :which-key "file")
      "fe"  '(:ignore t :which-key "emacs")
      "fed" 'find-user-init-file
      "feR" 'load-user-init-file
      "g"   '(:ignore t :which-key "git")
      "s"   '(:ignore t :which-key "search")
      "t"   '(:ignore t :which-key "toggle")
      "w"   '(:ignore t :which-key "window")) 

    (general-def
      :keymaps 'key-translation-map
      "ESC" (kbd "C-g"))

    (general-def
      :prefix "C-c"
      "a" 'org-agenda
      "c" 'org-capture)
    )
#+END_SRC
* Evil Mode
There is no better way but vim editing. This further allows for SPC for a leader key
#+BEGIN_SRC emacs-lisp
(use-package evil
  :hook (after-init . evil-mode)
  :config
  (setq doc-view-continues t)
  :general
  (evil-def
    "wh"  '(evil-window-left :wk "window left")
    "wl"  '(evil-window-right :wk "window right")
    "wj"  '(evil-window-down :wk "window down")
    "wk"  '(evil-window-up :wk "window up"))) 
#+END_SRC 
** Evil Commentary
Handy tool to comment blocks of code
#+BEGIN_SRC emacs-lisp 
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode 1)
  :general
  ('normal override-global-map
    "gc" '(evil-commentary :wk "comment")
    "gC" '(evil-commentary-line :wk "comment line"))) 
#+END_SRC 
* Narrowing System
** Ivy
Ivy is for quick and easy selection from a list. 
When Emacs prompts for a string from a list of several possible choices, 
Ivy springs into action to assist in narrowing and picking the right string from a vast number of choices. 
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :hook (after-init . ivy-mode)
    :commands (ivy-switch-buffer)
    :config
    (progn
      (setq ivy-use-virtual-buffers t
            ivy-count-format "(%d/%d) "
            ivy-truncate-lines nil
            ivy-initial-inputs-alist nil)
      (setq ivy-re-builders-alist
            '((t . ivy--regex-plus))))
    :general
    (evil-def
      "bm"  'ivy-switch-buffer))
#+END_SRC
** Counsel
A collection of Ivy-enhanced versions of common Emacs commands
#+BEGIN_SRC emacs-lisp
    (use-package counsel
      :after ivy
      :general
      (general-def
        "M-x"      '(counsel-M-x :wk "M-x")
        "C-x C-f"  '(counsel-find-file :wk "find file"))
      (evil-def
        "SPC"      '(counsel-M-x :wk "M-x")
        "ff"       '(counsel-find-file :wk "find file")
        "fr"       '(counsel-recentf :wk "recent files")
        "fL"       '(counsel-locate :wk "locate file")))
#+END_SRC
** Swiper
An Ivy-enhanced alternative to isearch.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper)
    :general
    (general-def
      "C-s"  'swiper)
    (evil-def
      "ss"  'swiper))
#+END_SRC
* Auto Completion
** Company
Company is an auto completion tool for programming languages.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :commands (company-complete-common
               company-manual-begin
               company-grab-line)
    :init
    (progn
      (setq company-idle-delay .1
            company-tooltip-limit 10
            company-tooltip-align-annotations t
            company-minimum-prefix-length 2
            company-require-match 'never
            company-dabbrev-code-other-buffers t
            company-dabbrev-ignore-case nil
            company-dabbrev-downcase nil
            ))
    :config
    (progn
      (setq company-backends
            '(company-keywords
              company-files
              company-capf
              company-dabbrev-code
              company-dabbrev))
      (setq company-frontends '(company-echo-metadata-frontend
                                company-pseudo-tooltip-unless-just-one-frontend
                                company-preview-frontend))
      (setq company-backends '((company-capf company-files)
                               (company-dabbrev-code company-keywords)
                               company-dabbrev
                               company-yasnippet)))
    :general
    (general-def
      "C-n"  'company-select-next
      "C-p"  'company-select-previous))
#+END_SRC
** Auto Complete
Since Company mode does not appear to kick in - lets try auto-complete mode.
#+BEGIN_SRC emacs-lisp :tangle off
  (use-package auto-complete
    :config
    (ac-config-default))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status)
    :general
    (evil-def
      "gs"  'magit-status))
 #+END_SRC
* Themes
** Theme Tools
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (rainbow-mode t))
#+END_SRC
** Doom Themes
 #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :hook (after-init . load-doom-vibrant)
     :config
     (doom-themes-org-config)
     (defun load-doom-one ()
         "Load Doom One theme"
       (interactive)
       (load-theme 'doom-one))
     (defun load-doom-one-light ()
       "Load the Doom White theme"
       (interactive)
       (load-theme 'doom-one-light))
     (defun load-doom-vibrant ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'doom-vibrant))
     (defun load-doom-tomorrow-blue ()
       "Load the Doom Vibrant theme"
       (interactive)
       ;;  (load-theme 'doom-tomorrow-blue))
       (load-file (expand-file-name "+doom-tomorrow-blue.el" user-emacs-directory)))
     (defun load-doom-tomorrow-night ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'doom-tomorrow-night))
     (evil-def
       "td" '(:ignore t :which-key "doom themes")
       "tdd" 'load-doom-one
       "tdv" 'load-doom-vibrant
       "tdl" 'load-doom-one-light
       "tdb" 'load-doom-tomorrow-blue
       "tdn" 'load-doom-tomorrow-night))
 #+END_SRC
** Doom One Blue Custom
#+BEGIN_SRC emacs-lisp :tangle off
  (require 'doom-themes)

  (defgroup doom-one-theme nil
    "Options for doom-themes"
    :group 'doom-themes)

  (defcustom doom-one-brighter-modeline nil
    "If non-nil, more vivid colors will be used to style the mode-line."
    :group 'doom-one-theme
    :type 'boolean)

  (defcustom doom-one-brighter-comments nil
    "If non-nil, comments will be highlighted in more vivid colors."
    :group 'doom-one-theme
    :type 'boolean)

  (defcustom doom-one-comment-bg doom-one-brighter-comments
    "If non-nil, comments will have a subtle, darker background. Enhancing their
  legibility."
    :group 'doom-one-theme
    :type 'boolean)

  (defcustom doom-one-padded-modeline doom-themes-padded-modeline
    "If non-nil, adds a 4px padding to the mode-line. Can be an integer to
  determine the exact padding."
    :group 'doom-one-theme
    :type '(or integer boolean))

  (def-doom-theme doom-one
    "A dark theme inspired by Atom One Dark"

    ;; name        default   256       16
    ((bg         '("#FFFFFF" nil       nil            ))
     (bg-alt     '("#21242b" nil       nil            ))
     (base0      '("#1B2229" "black"   "black"        ))
     (base1      '("#1c1f24" "#1e1e1e" "brightblack"  ))
     (base2      '("#202328" "#2e2e2e" "brightblack"  ))
     (base3      '("#23272e" "#262626" "brightblack"  ))
     (base4      '("#3f444a" "#3f3f3f" "brightblack"  ))
     (base5      '("#5B6268" "#525252" "brightblack"  ))
     (base6      '("#73797e" "#6b6b6b" "brightblack"  ))
     (base7      '("#9ca0a4" "#979797" "brightblack"  ))
     (base8      '("#DFDFDF" "#dfdfdf" "white"        ))
     (fg         '("#bbc2cf" "#bfbfbf" "brightwhite"  ))
     (fg-alt     '("#5B6268" "#2d2d2d" "white"        ))

     (grey       base4)
     (red        '("#ff6c6b" "#ff6655" "red"          ))
     (orange     '("#da8548" "#dd8844" "brightred"    ))
     (green      '("#98be65" "#99bb66" "green"        ))
     (teal       '("#4db5bd" "#44b9b1" "brightgreen"  ))
     (yellow     '("#ECBE7B" "#ECBE7B" "yellow"       ))
     (blue       '("#51afef" "#51afef" "brightblue"   ))
     (dark-blue  '("#2257A0" "#2257A0" "blue"         ))
     (magenta    '("#c678dd" "#c678dd" "brightmagenta"))
     (violet     '("#a9a1e1" "#a9a1e1" "magenta"      ))
     (cyan       '("#46D9FF" "#46D9FF" "brightcyan"   ))
     (dark-cyan  '("#5699AF" "#5699AF" "cyan"         ))

     ;; face categories -- required for all themes
     (highlight      blue)
     (vertical-bar   (doom-darken base1 0.1))
     (selection      dark-blue)
     (builtin        magenta)
     (comments       (if doom-one-brighter-comments dark-cyan base5))
     (doc-comments   (doom-lighten (if doom-one-brighter-comments dark-cyan base5) 0.25))
     (constants      violet)
     (functions      magenta)
     (keywords       blue)
     (methods        cyan)
     (operators      blue)
     (type           yellow)
     (strings        green)
     (variables      (doom-lighten magenta 0.4))
     (numbers        orange)
     (region         `(,(doom-lighten (car bg-alt) 0.15) ,@(doom-lighten (cdr base0) 0.35)))
     (error          red)
     (warning        yellow)
     (success        green)
     (vc-modified    orange)
     (vc-added       green)
     (vc-deleted     red)

     ;; custom categories
     (hidden     `(,(car bg) "black" "black"))
     (-modeline-bright doom-one-brighter-modeline)
     (-modeline-pad
      (when doom-one-padded-modeline
        (if (integerp doom-one-padded-modeline) doom-one-padded-modeline 4)))

     (modeline-fg     nil)
     (modeline-fg-alt base5)

     (modeline-bg
      (if -modeline-bright
          (doom-darken blue 0.475)
        `(,(doom-darken (car bg-alt) 0.15) ,@(cdr base0))))
     (modeline-bg-l
      (if -modeline-bright
          (doom-darken blue 0.45)
        `(,(doom-darken (car bg-alt) 0.1) ,@(cdr base0))))
     (modeline-bg-inactive   `(,(doom-darken (car bg-alt) 0.1) ,@(cdr bg-alt)))
     (modeline-bg-inactive-l `(,(car bg-alt) ,@(cdr base1))))


    ;; --- extra faces ------------------------
    ((elscreen-tab-other-screen-face :background "#353a42" :foreground "#1e2022")

     (evil-goggles-default-face :inherit 'region :background (doom-blend region bg 0.5))

     ((line-number &override) :foreground base4)
     ((line-number-current-line &override) :foreground fg)

     (font-lock-comment-face
      :foreground comments
      :background (if doom-one-comment-bg (doom-lighten bg 0.05)))
     (font-lock-doc-face
      :inherit 'font-lock-comment-face
      :foreground doc-comments)

     (mode-line
      :background modeline-bg :foreground modeline-fg
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
     (mode-line-inactive
      :background modeline-bg-inactive :foreground modeline-fg-alt
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
     (mode-line-emphasis
      :foreground (if -modeline-bright base8 highlight))

     (solaire-mode-line-face
      :inherit 'mode-line
      :background modeline-bg-l
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-l)))
     (solaire-mode-line-inactive-face
      :inherit 'mode-line-inactive
      :background modeline-bg-inactive-l
      :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-l)))

     ;; Doom modeline
     (doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
     (doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
     (doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
     (doom-modeline-buffer-project-root :foreground green :weight 'bold)

     ;; ivy-mode
     (ivy-current-match :background dark-blue :distant-foreground base0 :weight 'normal)

     ;; --- major-mode faces -------------------
     ;; css-mode / scss-mode
     (css-proprietary-property :foreground orange)
     (css-property             :foreground green)
     (css-selector             :foreground blue)

     ;; markdown-mode
     (markdown-markup-face :foreground base5)
     (markdown-header-face :inherit 'bold :foreground red)
     (markdown-code-face :background (doom-lighten base3 0.05))

     ;; org-mode
     (org-hide :foreground hidden)
     (solaire-org-hide-face :foreground hidden))


    ;; --- extra variables ---------------------
    ;; ()
    )
#+END_SRC
** Doom Themes Blue (Custom)
Personal attempt at bringing the blue theme to Doom Blue :)
  #+BEGIN_SRC emacs-lisp :tangle off 
    (require 'doom-themes)
    (defgroup doom-tomorrow-blue-theme nil
      "Options for doom-themes"
      :group 'doom-themes)

    (defcustom doom-tomorrow-blue-padded-modeline doom-themes-padded-modeline
      "If non-nil, adds a 4px padding to the mode-line.
    Can be an integer to determine the exact padding."
      :group 'doom-tomorrow-blue-theme
      :type '(or integer boolean))

    (def-doom-theme doom-tomorrow-blue
      "A theme based off of Chris Kempson's Tomorrow Blue."

      ;; name        gui       256       16
      ((bg         '("#ffffff" "white"   "white" ))
       (bg-alt     '("#eaeaea" nil       nil     ))
       (base0      '("#f2f2f2" "white"   "white" ))
       (base1      '("#e4e4e4" "#e4e4e4"         ))
       (base2      '("#dedede" "#cccccc"         ))
       (base3      '("#d6d4d4" "#cccccc" "silver"))
       (base4      '("#C0bfbf" "#c0c0c0" "silver"))
       (base5      '("#a3a1a1" "#adadad" "silver"))
       (base6      '("#8a8787" "#949494" "silver"))
       (base7      '("#696769" "#6b6b6b" "silver"))
       (base8      '("#000000" "#000000" "black" ))
       (fg         '("#4d4d4c" "#3a3a3a" "black"))
       (fg-alt     (doom-darken fg 0.6))

       (grey       '("#a5a4a5" "#999999" "silver"))
       (red        '("#c82829" "#cc3333" "red"))
       (orange     '("#f5871f" "#ff9933" "brightred"))
       (yellow     '("#eab700" "#ffcc00" "yellow"))
       (green      '("#718c00" "#669900" "green"))
       (blue       '("#3e999f" "#339999" "brightblue"))
       (dark-blue  '("#4271ae" "#336699" "blue"))
       (teal       blue) ; FIXME replace with real teal
       (magenta    '("#c9b4cf" "#c9b4cf" "magenta"))
       (violet     '("#8959a8" "#996699" "brightmagenta"))
       (cyan       '("#8abeb7" "#8abeb7" "cyan"))
       (dark-cyan  (doom-lighten cyan 0.4))

       ;; face categories
       (highlight      dark-blue)
       (vertical-bar   base0)
       (selection      base3)
       (builtin        blue)
       (comments       grey)
       (doc-comments   (doom-darken grey 0.1))
       (constants      orange)
       (functions      blue)
       (keywords       violet)
       (methods        blue)
       (operators      fg)
       (type           yellow)
       (strings        green)
       (variables      red)
       (numbers        orange)
       (region         selection)
       (error          red)
       (warning        yellow)
       (success        green)
       (vc-modified    fg-alt)
       (vc-added       green)
       (vc-deleted     red)

       ;; custom categories
       (modeline-bg     `(,(doom-darken (car bg) 0.1) ,@(cdr base3)))
       (modeline-bg-alt `(,(doom-darken (car bg) 0.14) ,@(cdr base1)))
       (modeline-fg     base8)
       (modeline-fg-alt comments)
       (-modeline-pad
        (when doom-tomorrow-blue-padded-modeline
          (if (integerp doom-tomorrow-blue-padded-modeline)
              doom-tomorrow-blue-padded-modeline
            4))))

      ;; --- faces ------------------------------
      ((doom-modeline-buffer-path       :foreground violet :bold bold)
       (doom-modeline-buffer-major-mode :inherit 'doom-modeline-buffer-path)

       ((line-number &override) :foreground base4)
       ((line-number-current-line &override) :foreground blue :bold bold)

       (ivy-current-match :background region :distant-foreground grey :weight 'ultra-bold)
       (ivy-minibuffer-match-face-1 :foreground base5 :weight 'light)
       (ivy-minibuffer-match-face-2 :inherit 'ivy-minibuffer-match-face-1 :foreground violet :weight 'ultra-bold)
       (ivy-minibuffer-match-face-3 :inherit 'ivy-minibuffer-match-face-2 :foreground blue)
       (ivy-minibuffer-match-face-4 :inherit 'ivy-minibuffer-match-face-2 :foreground red)

       ;; rainbow-delimiters
       (rainbow-delimiters-depth-1-face :foreground violet)
       (rainbow-delimiters-depth-2-face :foreground blue)
       (rainbow-delimiters-depth-3-face :foreground orange)
       (rainbow-delimiters-depth-4-face :foreground green)
       (rainbow-delimiters-depth-5-face :foreground magenta)
       (rainbow-delimiters-depth-6-face :foreground yellow)
       (rainbow-delimiters-depth-7-face :foreground teal)

       (mode-line
        :background modeline-bg :foreground modeline-fg
        :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
       (mode-line-inactive
        :background modeline-bg-alt :foreground modeline-fg-alt
        :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-alt))))

      ;; --- variables --------------------------
      ;; ()
      )

     (provide 'doom-tomorrow-blue-theme)
 #+END_SRC
** Sanityinc Themes
 #+BEGIN_SRC emacs-lisp
 (use-package color-theme-sanityinc-tomorrow
   :ensure t
   :config
   (defun load-sanityinc-blue()
     "Load the Sanityinc Blue theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-blue))
    (defun load-sanityinc-dark()
     "Load the Sanityinc Dark theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-night))
   (defun load-sanityinc-light()
     "Load the Sanityinc Light theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-day))
   :general
   (evil-def "ts" '(:ignore t :which-key "sanityinc")
     "tsb" 'load-sanityinc-blue
     "tsd" 'load-sanityinc-dark
     "tsl" 'load-sanityinc-light))
#+END_SRC* Powerline
* Modeline
** Doom Modeline
 Doom powerline together with the Doom theme, clean and fast
 #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode)
     :config
     (setq
      doom-modeline-buffer-file-name-style 'truncate-upto-project
      doom-modeline-icon t
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-minor-modes t
      doom-modeline-word-count t
      doom-modeline-checker-simple-format t
      doom-modeline-vcs-max-length 12
      doom-modeline-persp-name t
      doom-modeline-lsp t
      doom-modeline-github t
      doom-modeline-github-interval (* 30 60)
      doom-modeline-mu4e t
      doom-modeline-ircstylize 'identity))
 #+END_SRC
** Moody Modeline
 This is the latest from the develoer of Magit, and thus has potential.
 Bt still in early stages, and appears rather simple in functionality yet
 #+BEGIN_SRC emacs-lisp :tangle off
   (use-package moody
     :ensure t
     :config
     (moody-replace-mode-line-buffer-identification)
     (moody-replace-vc-mode))
 #+END_SRC
* Finishing Up
#+BEGIN_SRC emacs-lisp
   (eval-and-compile
     (add-hook 'emacs-startup-hook '(lambda ()
                                      (setq gc-cons-threshold 16777216
                                            gc-cons-percentage 0.1
                                            file-name-handler-alist
                                            temp--file-name-handler-alist))))

   (setq initial-scratch-message (concat "Startup time: " (emacs-init-time)))
#+END_SRC
* Notes
** Profiling
Install esup, and run the commmand form the commandline.
