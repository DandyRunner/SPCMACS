#+TITLE: SPCMACS
#+AUTHOR: Erwin Jansen
#+PROPERTY: header-args :tangle yes

* Introduction
** What is special about this emacs configuration
This configuration is an attempt to have a fast loading emacs, with a spacemacs like binding scheme.
Yet none of the ovehead of complicated layers, constructions, etc.
Note that this configuration does not include any programming environment, but that would be easy to add.
It does include however a proper GTD (get Things Done) config using org-mode.

Some of the techniques used include:
- Use-package, and it's auto loading capabilities
- General, for the keybindings and spacemacs shortcuts

** Use Use-package
I try to keep my configuration as declarative as possible, thanks to [[https://github.com/jwiegley/use-package][Use-package]] — it's very easy now.
- use-package is used for built-in packages or libraries too (without :ensure)
- each variable/face setting or each function call belongs to the one and only package which provides the symbol

To find out, where do they belong to, use /M-x describe-variable/, /M-x describe-face/ or /M-x describe-function/ accordingly.
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Variables.html][setq]] is almost always means changing customizable variable, so can be rewritten with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Applying-Customizations.html][customize-set-variable]] and therefore with [[https://github.com/jwiegley/use-package#customizing-variables][:custom]] keyword, besides that some defcustoms [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Definitions.html#Variable-Definitions][have get/set functions]], and just setq-ing them won't do the trick. It even supports inline comments so you can trace the changes.

At the same time I don't use [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][Customization]] interface, and my own [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][custom-file]] is =/dev/null=.

For example:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; "Don't show splash screen"
  (setq inhibit-startup-screen t)
#+END_SRC

Becomes:

#+BEGIN_SRC emacs-lisp :tangle no
  :custom
  (inhibit-startup-screen t "Don't show splash screen")
#+END_SRC

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][set-face-attribute]] and stuff like that → [[https://github.com/jwiegley/use-package#customizing-faces][:custom-face]]

#+BEGIN_SRC emacs-lisp :tangle no
   (set-face-attributes 'Man-overstrike nil :inherit font-lock-type-face :bold t)
#+END_SRC

Becomes

#+BEGIN_SRC emacs-lisp :tangle no
  :custom-face
  (Man-overstrike ((t (:inherit font-lock-type-face :bold t))))
#+END_SRC

All defuns should go to packages/libraries. [[https://github.com/quelpa/quelpa][Quelpa]] really helps with that — you can make a package from whatever source yo want.

The power of use-package is in the multitude of keywords:
- [[https://github.com/jwiegley/use-package#loading-packages-in-sequence][:after]] - if you need one package to be loaded after another.
- :ensure t - causes package to be installed automatically if not already present
- :dimisish /minor-mode/ - causes the minor mode activity not to show in the modeline
- :init - code that runs before the package. Note it always happens before package load!
- :config - code that runs after the packae has been loaded
- [[https://github.com/jwiegley/use-package#customizing-variables][:custom]] - allows customization of package custom variables
- :custom-face - allows customization of package custom faces
- :commands - autoloads for those commands and defers loading of the module until they are used
- [[https://github.com/jwiegley/use-package#key-binding][:bind]] - (instead if define-kye) bind the function to a key sequence, and defers loading until actually used
- [[https://github.com/jwiegley/use-package#hooks][:hook]] - (instead of add-hook) allows adding functions onto hooks

*** Fonts and colors.
Hardcoding these can break themes, so you use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][:inherit]] for customizations.

*** Keybindings
- Try not to hardcode bindings starting with /C-x/, /C-c/ and /C-h/, which are [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Prefix-Keymaps.html#Prefix-Keymaps][bound]] to ~ctl-x-map~, ~mode-specific-map~ and ~help-map~ respectively. Not that I'm not happy with all these defaults (except /C-h/, see *simple* package below), but just in case if you want to rebind them to something else (/SPC/, /mouse-1/, break, gas or whatever), you can do it, at least for my own bindings — sadly, some plugins hardcode them (and that causes many issues for alternative bindings users), but I hope it will change someday.
- Use named prefix keymaps so they are visible in minibuffer while [[https://github.com/justbur/emacs-which-key][Which-key]] is active.
- Use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Remapping-Commands.html][remap]] if you want to rebind a command to a "better" version of it and do an explicit keys declaration, when you rebind it to something completely different.
- Where mnemonics conflicts with ergonomics - prefer the former.
** Use General

** Special thanks to 
  This spcmacs configuration would never have developed without the inspiration from:
- https://github.com/willbush/system/tree/master/emacs
- https://github.com/a13/emacs.d


Still to consider for implementation:
+ https://github.com/cqql/xresources-theme
+ https://dougie.io/emacs/indentation/

* Header
#+BEGIN_SRC emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC
* Personal Information
Personal information, to be used for instance for email and git.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Erwin Jansen"
      user-mail-address "echjansen@outlook.com"
      auth-sources (list (expand-file-name "~/.authinfo.gpg")))
#+END_SRC
* Bootup
Garbage collection on hold while the init scrips runs, and redirect the custom paramaters to be written in a seperate file rather than this init file (spcmacs.el)
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))

  (eval-and-compile
    (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

  (defvar temp--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+END_SRC
* Package Sources
** ocal mirror
Here is for local mirror:
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)
    (setq package-archives
	  `(("melpa" . ,(concat "/home/ejansen/" ".elpa-mirror/melpa/"))
	    ("org"   . ,(concat "/home/ejansen/" ".elpa-mirror/org/"))
	    ("gnu"   . ,(concat "/home/ejansen/" ".elpa-mirror/gnu/")))))
#+END_SRC
** Remote mirror
Here is the remote mirror, if you want the exact same packages (tested):
#+BEGIN_SRC emacs-lisp :tangle off
  (eval-when-compile
    (require 'package)
    (setq package-archives
	  '(("melpa" . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/melpa/")
	    ("org"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/org/")
	    ("gnu"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/gnu/"))))
#+END_SRC
** Standard melpa, elpa and org repositories
#+BEGIN_SRC emacs-lisp :tangle off
  (eval-when-compile
    (require 'package)
    ;; tells emacs not to load any packages before starting up
    ;; the following lines tell emacs where on the internet to look up
    ;; for new packages.
    (setq package-archives '(
			       ("melpa"   . "https://melpa.org/packages/")
			       ("elpa"    . "https://elpa.gnu.org/packages/")
			       ("org"     . "https://orgmode.org/elpa/"))))
#+END_SRC
** Use-package 
Set the load-path and avoid calling /package-initialize/ for performance reasons, by setting package--init-file-ensured to true which tells package.el to not automatically call it on our behalve. 
Additionally set package-enable-at-startup to nil to pacakages will not automatically be loaded, sicne use-package will take care of this.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/.elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t))

    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t)))

    ;; (package-initialize)
    (unless package--initialized (package-initialize t))

    ;; Bootstrap `use-package'
    (unless (package-installed-p 'use-package) ; unless it is already installed
      (package-refresh-contents) ; updage packages archive
      (package-install 'use-package)) ; and install the most recent version of use-package

    ;; Start using use-package
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC
* Keybindings
General is a generic package for concise key binding in emacs.
This configuration sets up a spacemacs like keybinding - here using emacs default functions,
that can be overiden later by installed packages to provide more complete functions.
** The General Package
#+BEGIN_SRC emacs-lisp 
  (use-package general
    :after which-key
    :config
    (general-override-mode 1)

    (defun find-user-init-file ()
      "Edit the `user-init-file', in the same window."
      (interactive)
      (find-file (expand-file-name "spcmacs.org" user-emacs-directory)))

    (defun load-user-init-file ()
      "Load the `user-init-file', in same window."
      (interactive)
      (load-file user-init-file))

    (defun rename-file-and-buffer ()
      "Rename the current buffer and file it is visiting."
      (interactive)
      (let ((filename (buffer-file-name)))
        (if (not (and filename (file-exists-p filename)))
            (message "Buffer is not visiting a file!")
          (let ((new-name (read-file-name "New name: " filename)))
            (cond
             ((vc-backend filename) (vc-rename-file filename new-name))
             (t
              (rename-file filename new-name t)
              (set-visited-file-name new-name t t)))))))

    (general-create-definer evil-def
      :states '(normal)
      :prefix "SPC")

    (general-create-definer emacs-def
      :states '(emacs)
      :prefix "s-SPC")

    (general-def
      :keymaps 'key-translation-map
      "ESC" (kbd "C-g"))

    (general-def
      :prefix "C-c"
      "a" 'org-agenda
     "c" 'org-capture)
#+END_SRC     
** SPC
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "SPC"
    :states '(normal visual)
    :keymaps 'override
    "a"   '(:ignore t :which-key "apps")
    "b"   '(:ignore t :which-key "buffer")
    "c"   '(:ignore t :which-key "comment")
    "f"   '(:ignore t :which-key "file")
    "F"   '(:ignore t :which-key "Frame")
    "fe"  '(:ignore t :which-key "emacs")
    "g"   '(:ignore t :which-key "git")
    "h"   '(:ignore t :which-key "help")
    "j"   '(:ignore t :which-key "jump")
    "n"   '(:ignore t :which-key "narrow")
    "p"   'projectile-command-map
    "s"   '(:ignore t :which-key "search")
    "S"   '(:ignore t :which-key "spell-check")
    "t"   '(:ignore t :which-key "toggle")
    "w"   '(:ignore t :which-key "window")
    "x"   '(:ignore t :which-key "text"))
#+END_SRC
** SPC f - File
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "SPC f"
    :states '(normal visual)
    :keymaps 'override
    "d"  '(fd-dired :wk "unknown")
    "ed" '(find-user-init-file :wk "edit user config")
    "eR" '(load-user-init-file :wk "reload user config")
    "f"  '(find-file :wk "find file")
    "s"  '(save-buffer :wk "save file"))
#+END_SRC
** SPC h - Help
#+BEGIN_SRC emacs-lisp
  (general-def
    :prefix "SPC h"
    :states '(normal visual)
    :keymaps 'override
    "d" '(:ignore t :wk "describe")
    "db" '(describe-bindings :wk "describe bindings")
    "dc" '(describe-char :wk "describe character")
    "df" '(describe-function :wk "describe function")
    "dk" '(describe-key :wk "describe key")
    "dm" '(describe-mode :wk "describe mode")
    "dp" '(describe-package :wk "describe package")
    "dv" '(describe-variable :wk "describe variable")
    "dt" '(describe-theme :wk "describe theme")
    "ds" '(describe-symbol :wk "describe symbol")
    "i"  '(info :wk "info")
    "I"  '(info-display-manual :wk "info from manual")
    "l"  '(find-library :wk "find library")
    "n"  '(view-emacs-news :wk "emacs news")
    "w"  '(woman :wk "woman"))
#+END_SRC
** The End
#+BEGIN_SRC emacs-lisp
    )
#+END_SRC
** Which Key
What would we be without the key popup help appearing when hitting M-x or M-c?
In combination with general.el we also have which-key help with the leader key SPC.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode 1))
#+END_SRC
* Emacs improvements
** Icons and faces
Get some pretty symbols in our code and buffers by using all-the-icons (windows install manualy)
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :custom-face
    ;; Reset colors since they are too dark in `doom-themes'
    (all-the-icons-silver ((((background dark)) :foreground "#716E68")
                           (((background light)) :foreground "#716E68")))
    (all-the-icons-lsilver ((((background dark)) :foreground "#B9B6AA")
                            (((background light)) :foreground "#7F7869")))
    (all-the-icons-dsilver ((((background dark)) :foreground "#838484")
                            (((background light)) :foreground "#838484")))
;;    :init
;;    (unless (or sys/win32p (member "all-the-icons" (font-family-list)))
;;      (all-the-icons-install-fonts t))
    :config
    (add-to-list 'all-the-icons-icon-alist
                 '("\\.go$" all-the-icons-fileicon "go" :face all-the-icons-blue))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(go-mode all-the-icons-fileicon "go" :face all-the-icons-blue))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(help-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1 :face all-the-icons-purple))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(Info-mode all-the-icons-faicon "info-circle" :height 1.1 :v-adjust -0.1))
    (add-to-list 'all-the-icons-icon-alist
                 '("NEWS$" all-the-icons-faicon "newspaper-o" :height 0.9 :v-adjust -0.2))
    (add-to-list 'all-the-icons-icon-alist
                 '("Cask\\'" all-the-icons-fileicon "elisp" :height 1.0 :face all-the-icons-blue))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(cask-mode all-the-icons-fileicon "elisp" :height 1.0 :face all-the-icons-blue))
    (add-to-list 'all-the-icons-icon-alist
                 '(".*\\.ipynb\\'" all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(ein:notebooklist-mode all-the-icons-faicon "book" :face all-the-icons-orange))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(ein:notebook-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(ein:notebook-multilang-mode all-the-icons-fileicon "jupyter" :height 1.2 :face all-the-icons-orange))
    (add-to-list 'all-the-icons-icon-alist
                 '("\\.epub\\'" all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(nov-mode all-the-icons-faicon "book" :height 1.0 :v-adjust -0.1 :face all-the-icons-green))
    (add-to-list 'all-the-icons-mode-icon-alist
                 '(gfm-mode  all-the-icons-octicon "markdown" :face all-the-icons-blue)))

#+END_SRC
** IBuffer
IBuffer is the emacs build in buffer system. It is used and linked to other packages like counsel and projectile to provide pretty lists.
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure nil  
    :functions (all-the-icons-icon-for-file
                all-the-icons-icon-for-mode
                all-the-icons-auto-mode-match?
                all-the-icons-faicon)
    :commands ibuffer-find-file
    :bind ("C-x C-b" . ibuffer)
    :general
    (general-def
      :prefix "SPC"
      :states '(normal visual)
      :keymaps 'override
      "bb"  '(ibuffer-list-buffers :wk "buffer list"))
    :config
    (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))

    ;; Display buffer icons on GUI
    (when (display-graphic-p)
      ;; To be correctly aligned, the size of the name field must be equal to that
      ;; of the icon column below, plus 1 (for the tab I inserted)
      (define-ibuffer-column icon (:name "   ")
        (let ((icon (if (and (buffer-file-name)
                             (all-the-icons-auto-mode-match?))
                        (all-the-icons-icon-for-file (file-name-nondirectory (buffer-file-name)) :v-adjust -0.05)
                      (all-the-icons-icon-for-mode major-mode :v-adjust -0.05))))
          (if (symbolp icon)
              (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0))
            icon)))

      (let ((tab-width 1))
        (setq ibuffer-formats '((mark modified read-only locked
                                      ;; Here you may adjust by replacing :right with :center or :left
                                      ;; According to taste, if you want the icon further from the name
                                      " " (icon 1 -1 :left :elide) "\t" (name 18 18 :left :elide)
                                      " " (size 9 -1 :right)
                                      " " (mode 16 16 :left :elide) " " filename-and-process)
                                (mark " " (name 16 -1) " " filename))))

      (with-eval-after-load 'counsel
        (defun my-ibuffer-find-file ()
          (interactive)
          (let ((default-directory (let ((buf (ibuffer-current-buffer)))
                                     (if (buffer-live-p buf)
                                         (with-current-buffer buf
                                           default-directory)
                                       default-directory))))
            (counsel-find-file default-directory)))
        (advice-add #'ibuffer-find-file :override #'my-ibuffer-find-file))

      ;; Group ibuffer's list by project root
      (use-package ibuffer-projectile
        :functions (all-the-icons-octicon
                    ibuffer-do-sort-by-alphabetic)
        :hook ((ibuffer . (lambda ()
                            (ibuffer-projectile-set-filter-groups)
                            (unless (eq ibuffer-sorting-mode 'alphabetic)
                              (ibuffer-do-sort-by-alphabetic)))))
        :config
        (setq ibuffer-projectile-prefix
              (if (display-graphic-p)
                  (concat
                   (all-the-icons-octicon "file-directory"
                                          :face ibuffer-filter-group-name-face
                                          :v-adjust -0.05
                                          :height 1.25)
                   " ")
                "Project: ")))))
#+END_SRC
** Ibuffer Version Control - called with C-x C-b (ibuffer-list-buffers)
Pretty list buffer for version controlled files
#+BEGIN_SRC emacs-lisp :tangle off
  (use-package ibuffer-vc
    :ensure t
    :config
    (define-ibuffer-column icon (:name "Icon" :inline t)
      (all-the-icons-ivy--icon-mode major-mode))
    :custom
    (ibuffer-formats
     '((mark modified read-only vc-status-mini " "
             (name 18 18 :left :elide)
             " "
             (size 9 -1 :right)
             " "
             (mode 16 16 :left :elide)
             " "
             (vc-status 16 16 :left)
             " "
             vc-relative-file)))
    :hook
    (ibuffer . (lambda ()
                 (ibuffer-vc-set-filter-groups-by-vc-root)
                 (unless (eq ibuffer-sorting-mode 'alphabetic)
                   (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
* Sensible defaults
When using the graphical system in linux it is faster to create an .Xresources file in the home folder.
This speeds up emacs considerably. 
#+BEGIN_SRC :tangle off 
Emacs.menuBar: off
Emacs.verticalScrollBars: off
Emacs.toolBar: off
#+END_SRC
Once the resource file is configured run the following command to instruct Xorg
#+BEGIN_SRC :tangle off
xrdb .Xresources
#+END_SRC
In case you are not on linux
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-face-attribute 'default nil
                        :family "Source Code Pro"
                        :height 110
                        :weight 'normal
                        :width 'normal))

#+END_SRC
And now for the common defaults
#+BEGIN_SRC emacs-lisp
  ;; Show line and column numbers on the modeline
  (line-number-mode 1)
  (column-number-mode 1)

  ;; No two spaces after a period
  (setq sentence-end-double-space nil)

  ;; Who wants to type `yes and `no on answers?
  (defalias 'yer-or-no-p 'y-or-no-p)

  ;; Prevent indentation inserting tabs
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; Toggle wrap text after 80 characters on a line
  (setq fill-column 80)

  ;; Set default line ending
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  (setq inhibit-splash-screen t
        initial-scratch-message nil
        ring-bell-function 'ignore
        help-window-select t)

  ;; Changes default behaviour of scrolling to the bottom. Pointer will stay on bottom.
  (setq scroll-conservatively 666)

  ;; Faintly highlight the line with the pointer
  (global-hl-line-mode 1)

  ;; Follow symlinks without prompting
  (setq vc-follow-symlinks t)

  ;; Iproves perfromance with doom modeline 9in windows)
  (setq inhibit-compacting-font-caches t)

  ;; Automaticall create pairs
  (setq electric-pair-pairs
        '(
          (?\( . ?\))
          (?\[ . ?\])
          (?\{ . ?\})
          ))
  (electric-pair-mode t)

  ;; Set tab behaviour
  (setq default-tab-width 2)
  (setq evil-shift-width 2)

  ;; Allow narow to region
  (put 'narrow-to-region 'disabled nil)

  ;; Blink cursor to find it easily
  (blink-cursor-mode 1)

  (winner-mode 1)

  ;; Starup full screen
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)

  (setq auto-revert-check-vc-info t) ;;TODO - possible performance issue

  ;; a proper font
  (set-face-attribute 'default nil
                      :family "Source Code Pro"
                      :height 110
                      :weight 'normal
                      :width 'normal)
#+END_SRC
** Backups and auto save 
#+BEGIN_SRC emacs-lisp
  ;; Put backup files neatly away
  (let ((backup-dir "~/.emacs.d/.backups")
        (auto-saves-dir "~/.emacs.d/.auto-saves/"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir))

  (setq backup-by-copying t    ; Don't delink hardlinks
        delete-old-versions t  ; Clean up the backups
        version-control t      ; Use version numbers on backups,
        kept-new-versions 5    ; keep some new versions
        kept-old-versions 2)   ; and some old ones, too
#+END_SRC
* Window Management
** ace-window
We need a way to select, swap, move, etc windows. Windows is ace :).
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :after general
    :custom
    (aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9) "Use numbers for selecting window.")
    (aw-scope 'frame "Highlight only current frame.")
    (aw-dispatch-always t "All functions work for two windows too")
    (ace-window-display-mode t "Always show the window number")
    :bind
    ("M-o" . ace-window)
    :general
    (general-def
      :prefix "SPC"
      :states '(normal visual)
      :keymaps 'override
      "wd"  '(ace-delete-window :wk "delete")
      "wD"  '(ace-delete-other-windows :wk "delete others")
      "wm"  '(ace-maximize-window :wk "maximize")
      "ws"  '(ace-swap-window   :wk "swap")
      "ww"  '(ace-select-window :wk "select"))) 
#+END_SRC
* Evil Mode
There is no better way but vim editing. This further allows for SPC for a leader key
#+BEGIN_SRC emacs-lisp 
  (use-package evil
    :hook (after-init . evil-mode)
    :config
    ;; Set evil mode tags
    (setq evil-normal-state-tag " NORMAL")
    (setq evil-insert-state-tag " INSERT")
    (setq evil-visual-state-tag " VISUAL")
    (setq doc-view-continues t)
    :general
    (evil-def
      "wh"  '(evil-window-left :wk "window left")
      "wl"  '(evil-window-right :wk "window right")
      "wj"  '(evil-window-down :wk "window down")
      "wk"  '(evil-window-up :wk "window up"))) 
#+END_SRC 
** Evil Commentary
Handy tool to comment blocks of code
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode 1)
  :general
  ('normal override-global-map
    "gc" '(evil-commentary :wk "comment")
    "gC" '(evil-commentary-line :wk "comment line"))) 
#+END_SRC 
* Narrowing System
** Ivy
Ivy is for quick and easy selection from a list. 
When Emacs prompts for a string from a list of several possible choices, 
Ivy springs into action to assist in narrowing and picking the right string from a vast number of choices.
In short - it provides an interface to list, search, filter and perform actions on a collection of "things".
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :hook (after-init . ivy-mode)
    :commands (ivy-switch-buffer)
    :diminish ivy-mode
    :config
    (progn
      (setq ivy-use-virtual-buffers t
            ivy-count-format "(%d/%d) "
            ivy-truncate-lines nil
            ivy-initial-inputs-alist nil
            ivy-display-style 'fancy)
      (setq ivy-re-builders-alist
            '((t . ivy--regex-plus)))))

  ;; Used by Ivy to sort commands by frequency
  (use-package smex
    :hook (after-init . smex-initialize)
    :config
    (global-set-key (kbd "M-X") 'smex-major-mode-commands))
#+END_SRC
** Counsel
To keep concerns separated, Ivy doesn't have a lot of other functionality.
Counsel provides a collection of Ivy-enhanced versions of common Emacs commands.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :bind (("C-c C-r" . ivy-resume))
    :general
    (general-def
      "M-x"      '(counsel-M-x :wk "M-x")
      "C-x C-f"  '(counsel-find-file :wk "find file"))
    (general-def
      :prefix "SPC"
      :states '(normal visual)
      :keymaps 'override
      ;; SPC
      "SPC"      '(counsel-M-x :wk "M-x")
      ;; SPC f - File
      "ff"       '(counsel-find-file :wk "find file")
      "fr"       '(counsel-recentf :wk "recent files")
      "fL"       '(counsel-locate :wk "locate file")
      ;; SPC h d -Help Describe
      "hdb" '(counsel-descbinds :wk "describe bindings")
      "hdf" '(counsel-describe-function :wk "describe function")
      "hdv" '(counsel-describe-variable :wk "describe variable")
      "hds" '(counsel-info-lookup-symbol :wk "describe symbol")))
#+END_SRC
** Swiper
An Ivy-enhanced alternative to isearch.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper)
    :general
    (general-def
      "C-s"  'swiper)
    (evil-def
      "ss"  'swiper))
#+END_SRC
* Projects
Some tools that help when working with projects
** Projectile
provide a nice set of features operating on a project level without introducing external dependencies (when feasible)
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-project-root-files-functions
     '(projectile-root-local
       projectile-root-top-down
       projectile-root-bottom-up
       projectile-root-top-down-recurring))
    (projectile-completion-system 'ivy))
#+END_SRC
** Projectile Counsel
Counsel filtering support for projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :after counsel projectile
    :config
    (counsel-projectile-mode))
#+END_SRC
* Auto Completion
** Company
Company is an auto completion tool for programming languages.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :commands (company-complete-common
               company-manual-begin
               company-grab-line)
    :diminish company-mode
    :init
    (progn
      (setq company-idle-delay .1
            company-tooltip-limit 10
            company-tooltip-align-annotations t
            company-minimum-prefix-length 2
            company-require-match 'never
            company-dabbrev-code-other-buffers t
            company-dabbrev-ignore-case nil
            company-dabbrev-downcase nil
            ))
    :config
    (progn
      (setq company-backends
            '(company-keywords
              company-files
              company-capf
              company-dabbrev-code
              company-dabbrev))
      (setq company-frontends '(company-echo-metadata-frontend
                                company-pseudo-tooltip-unless-just-one-frontend
                                company-preview-frontend))
      (setq company-backends '((company-capf company-files)
                               (company-dabbrev-code company-keywords)
                               company-dabbrev
                               company-yasnippet)))
    :general
    (general-def
      "C-n"  'company-select-next
      "C-p"  'company-select-previous))
#+END_SRC
** Auto Complete
Since Company mode does not appear to kick in - lets try auto-complete mode.
#+BEGIN_SRC emacs-lisp :tangle off
  (use-package auto-complete
    :config
    (ac-config-default))
#+END_SRC
* Organisation
** Org Mode
The best reason for using emacs. org Mode provides a complete oragnisation tool. This particular configuration is focusing on GTD - Getting Things Done!
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    ;;ensure we load the latest version of org
;;    :ensure org-plus-contrib
    :hook 
    ;; Wrap long lines while in org mode
    (org-mode . visual-line-mode)
    ;; Indent content under headers, which makes for easier reading
    (org-mode . org-indent-mode) 
    :custom
    (org-src-tab-acts-natively t))
#+END_SRC
** Org Bullet
Lets have some better looking bullets for our headers
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :custom
    ;; org-bullets-bullet-list
    ;; default: "◉ ○ ✸ ✿"
    ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
    ;; Small: ► • ★ ▸
    (org-bullets-bullet-list '("►"))
    ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
    ;; (org-ellipsis "⤵")
    (org-ellipsis "▼")
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC
** Org Brain
The perfect way to map several org files and build a map of thought or notes.
It's based on the brain principle and supports Parents, Children and Friends.
#+BEGIN_SRC emacs-lisp
  (use-package org-brain
    :ensure t
    :init
    (setq org-brain-path "`~/Org/brain")
    (with-eval-after-load 'evil
                          (evil-set-initial-state 'org-brain-visualise-mode 'emacs))
    :config
    (setq org-id-track-globally t))

#+END_SRC
* Programming
* Version Control
** Magit
The second next best reason to use emacs. The Magit package provides an excellent interface to the complexity of Git.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status)
    :general
    (evil-def
      "gs"  'magit-status))
 #+END_SRC
* UI
** Themes
*** Doom Themes
 #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config
     ;;(doom-themes-org-config)
     (defun load-doom-one ()
         "Load Doom One theme"
       (interactive)
       (load-theme 'doom-one))
     (defun load-doom-one-light ()
       "Load the Doom White theme"
       (interactive)
       (load-theme 'doom-one-light))
     (defun load-doom-vibrant ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'doom-vibrant))
     (defun load-doom-tomorrow-blue ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'sanityinc-tomorrow-blue))
       ;; (load-file (expand-file-name "+doom-tomorrow-blue.el" user-emacs-directory)))
     (defun load-doom-tomorrow-night ()
       "Load the Doom Vibrant theme"
       (interactive)
       (load-theme 'doom-tomorrow-night))
     (evil-def
       "td" '(:ignore t :which-key "doom themes")
       "tdd" 'load-doom-one
       "tdv" 'load-doom-vibrant
       "tdl" 'load-doom-one-light
       "tdb" 'load-doom-tomorrow-blue
       "tdn" 'load-doom-tomorrow-night))
 #+END_SRC
*** Sanityinc Themes
 #+BEGIN_SRC emacs-lisp
 (use-package color-theme-sanityinc-tomorrow
   :ensure t
   :hook (after-init . load-sanityinc-blue)
   :config
   (defun load-sanityinc-blue()
     "Load the Sanityinc Blue theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-blue))
    (defun load-sanityinc-dark()
     "Load the Sanityinc Dark theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-night))
   (defun load-sanityinc-light()
     "Load the Sanityinc Light theme"
     (interactive)
     (load-theme 'sanityinc-tomorrow-day))
   :general
   (evil-def 
     "ts" '(:ignore t :which-key "tomorrow")
     "tsb" 'load-sanityinc-blue
     "tsd" 'load-sanityinc-dark
     "tsl" 'load-sanityinc-light))
#+END_SRC
*** Theme Tools
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :commands (rainbow-mode))
#+END_SRC
** Modeline
*** Doom Modeline
 Doom powerline together with the Doom theme, clean and fast
 #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode)
     :config
     (setq
      doom-modeline-buffer-file-name-style 'truncate-upto-project
      doom-modeline-icon t
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
;;    doom-modeline-minor-modes t
      doom-modeline-word-count t
      doom-modeline-checker-simple-format t
      doom-modeline-vcs-max-length 12
      doom-modeline-persp-name t
      doom-modeline-lsp t
      doom-modeline-github t
      doom-modeline-github-interval (* 30 60)
      doom-modeline-mu4e t
      doom-modeline-ircstylize 'identity))
   (require 'doom-modeline)
 #+END_SRC
*** Spaceline
A popular and extensive modeline with tons of features.
#+BEGIN_SRC emacs-lisp :tangle off
  (use-package spaceline
    :ensure t
    :hook (after-init . spaceline-spacemacs-theme)
    :init
    (setq powerline-default-separator 'arrow-fade)
    (require 'spaceline-config)
    (use-package fancy-battery
      :ensure t
      :hook (after-init . fancy-battery-mode)
      :init
      (display-battery-mode -1))
    :config
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-evil-state-on)
    (spaceline-toggle-battery-on)
    (spaceline-toggle-buffer-size-off))
#+END_SRC
*** Moody Modeline
 This is the latest from the develoer of Magit, and thus has potential.
 Bt still in early stages, and appears rather simple in functionality yet
 #+BEGIN_SRC emacs-lisp :tangle off
   (use-package moody
     :ensure t
     :config
     (moody-replace-mode-line-buffer-identification)
     (moody-replace-vc-mode))
 #+END_SRC
*** Hide Modeline
Under some circumstances the modeline should be hidden
#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line
              :hook
              (((completion-list-mode
                 completion-in-region-mode
                 neotree-mode
                 treemacs-mode)
                . hide-mode-line-mode)))
#+END_SRC
*** Diminish
Now that we are ready to laod packages, we need to make sure we will keep our modeline clean by using the dimish package.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** Dashboard
Provide a decend startup screen.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-items '((agenda . 5)
                       (recents . 5)
                       (projects . 5)
                       (registers . 5)
                       (bookmarks . 5))))
#+END_SRC
* Finishing Up
Our configuration file has loaded. Time to enable garbage collection again, and display the time it took to load.
#+BEGIN_SRC emacs-lisp
   (eval-and-compile
     (add-hook 'emacs-startup-hook '(lambda ()
                                      (setq gc-cons-threshold 16777216
                                            gc-cons-percentage 0.1
                                            file-name-handler-alist
                                            temp--file-name-handler-alist))))

   (setq dashboard-banner-logo-title (concat "Welcome to Emacs: " user-full-name ". Startup time: " (emacs-init-time)))
#+END_SRC
Tangle this file to create the spcmacs.el file, which speeds up loading emacs.
#+BEGIN_SRC emcas-lisp
(add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
#+END_SRC 
* Notes
** Profiling
Install esup, and run the commmand form the commandline....
